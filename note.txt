-------------目录--------------
demo1:环境搭建
demo2:持久化类、主键生成策略、对象状态、缓存
demo3:表关系
demo4:查询方式、抓取策略
demo5:继承关系的映射
----------------------------
hibernate优化手段
1.缓存
2.抓取策略
----------------------------------------
1.hibernate约束从哪找
引入jar包后，hibernate-core-5.0.7.Final.jar---->	org.hibernate

2.hibernate核心API
	configuration对象：加载映射文件，创建sessionFactory对象
	sessionFactory对象：数据存储源代理，创建session对象
	session对象：数据库连接对象，不是线程安全的

3.hibernate对象状态
	瞬时：由new创建，尚未与hibernate的Session
	持久：在数据库中有对应的记录，并拥有一个持久化标识（identifier）
		对对象的修改操作将会保存到数据库中，无需执行update
	托管：与持久（Persistent）对象关联的 Session 被关闭后

4.缓存
	一级缓存：session级别
	二级缓存：sessionFactory级别，实际中被redis替代

5.级联关系
	cascade：级联，“save-update”、“delate”
	inverse：放弃外键维护权，“true”、“false”默认值
		
6.查询方式
	对象导航检索：根据一个已经查询到的对象，获得其关联的对象
	OID:根据对象主键查询，get load
	QBC:Query By Criteria，条件查询
	HQL:
	SQL:

7.抓取策略
	概述：通过一个对象抓取到关联对象需要发送SQL语句，SQL语句如何发送，
	发送成什么样格式通过策略进行配置
	fetch:抓取策略，控制SQL语句格式
			select：默认值，发送普通的select语句，查询关联对象
			join：发送一条迫切左外连接查询关联对象
			subselect：发送一条子查询查询其关联对象
	lazy:延迟加载，控制查询关联对象的时候是否采用延迟
	
	
-------------------问题------------------------------
1.getCourrentSession()与openSession()的区别？
	1. 采用getCurrentSession()创建的session会绑定到当前线程中(第一次调用时会创建一个Session实例，
	如果该Session未关闭，后续多次获取的是同一个Session实例)，而采用openSession()创建的session
	则不会(每次打开都是新的Session，所以多次获取的Session实例是不同的)。
	2.采用getCurrentSession()创建的session在commit或rollback时会自动关闭，
	而采用openSession()创建的session必须手动关闭
	3.使用getCurrentSession时，需求配置：<property name="current_session_context_class">XXX</property>  
2.如何调用原生 jdbc API？
	调用 Session 的 doWork() 方法
3.session的清理flush()与清空clear()有什么区别？
4.get()与load()有什么区别？



--------------------错误记录----------------------------
1.Access denied for user 'cofe'@'localhost' (using password: YES)
用没有访问权限(密码错误、数据库名错误等)

2.org.hibernate.TypeMismatchException
类型转换异常如：get(class,1) get(class,Long(1));

3.Cannot use identity column key generation with <union-subclass>
继承关系映射时，使用union-subclass方式，主键自增不能使用identity
1231231哈哈哈哈
123123
123123
123123


23123123
